{"version":3,"sources":["api.js","controls/proximity-sensor.jsx","controls/slider-control.jsx","video/video-feed.jsx","controls/info/rpi-info.jsx","settings/settings.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","sendDataToControlTrain","speed","direction","emit","Number","ProximitySensor","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","proximity","err","setState","on","data","console","log","width","toString","backgroundColor","react_default","a","createElement","className","style","setStyles","Component","innerGrid","css","_templateObject","innerGridItem","_templateObject2","buttonStyle","_templateObject3","Slider","sliderValue","toLowerCase","capitalizeFirstLetter","string","charAt","toUpperCase","slice","e","val","target","value","_this2","core_browser_esm","onClick","stopTrain","_this3","type","id","name","min","max","onChange","setSliderValues","VideoFeed","url","port","caption","src","alt","uniqueString","require","Info","info","checkInfoItemExistsAndUpdate","infoItem","toConsumableArray","filter","header","length","addInfoItem","item","time","Date","push","sort","b","concat","JSON","stringify","removeInfoItem","String","trim","map","key","message","src_settings_settings","saveValue","toggle","stopPropagation","videoFeeds","feed","defaultValue","onBlur","App","rawFeedUrl","rawFeedPort","OpencvFeedUrl","OpencvFeedPort","websocketUrl","websocketPort","settingsShow","toggleSettingsPage","settings","foo","video_feed","proximity_sensor","slider_control","rpi_info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9f76f0f.chunk.js","sourcesContent":["import openSocket from 'socket.io-client';\r\nconst socket = openSocket('http://192.168.0.4:5000');\r\n\r\nfunction subscribeToTimer(cb) {\r\n    socket.on('timer', timestamp => cb(null, timestamp));\r\n    socket.emit('subscribeToTimer', 1000);\r\n}\r\n\r\nfunction sendData() {\r\n    socket.emit('robot-data', { it: 'worked' });\r\n}\r\nfunction sendDataToControlTrain(speed, direction) {\r\n    socket.emit('train-control', {\r\n        speed: Number(speed),\r\n        direction: direction\r\n    });\r\n}\r\n\r\nfunction subscribeToProximitySensor(cb) {\r\n    socket.on('proximity', data => {\r\n        console.log(data);\r\n        cb(null, data);\r\n    });\r\n}\r\nfunction subscribeToTrainRemoteControl(cb) {\r\n    socket.on('train-remote-control', data => {\r\n        cb(null, data);\r\n    });\r\n}\r\nfunction subscribeToInfo(cb) {\r\n    socket.on('info', data => {\r\n        cb(null, data);\r\n    });\r\n}\r\n\r\nexport {\r\n    subscribeToTimer,\r\n    sendData,\r\n    subscribeToProximitySensor,\r\n    subscribeToTrainRemoteControl,\r\n    sendDataToControlTrain,\r\n    subscribeToInfo\r\n};\r\n","import React, { Component } from 'react';\r\nimport { subscribeToProximitySensor } from '../api';\r\n\r\nclass ProximitySensor extends Component {\r\n    state = {\r\n        proximity: 'no data yet'\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToProximitySensor((err, proximity) =>\r\n            this.setState({\r\n                proximity\r\n            })\r\n        );\r\n    }\r\n\r\n    setStyles() {\r\n        const proximity = this.state.proximity;\r\n        if (proximity < 30) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'red'\r\n            };\r\n        } else if (proximity < 50) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'yellow'\r\n            };\r\n        }\r\n        const p = proximity < 100 ? proximity : 100;\r\n        return { width: p.toString() + '%', backgroundColor: 'green' };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Proximity</h2>\r\n                <div />\r\n                <div className='test' style={this.setStyles()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProximitySensor;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport { sendDataToControlTrain, subscribeToTrainRemoteControl } from '../api';\r\n\r\nconst innerGrid = css`\r\n    text-align: center;\r\n    display: grid;\r\n    column-gap: 10px;\r\n    grid-template-columns: 1fr 3fr 3fr 1fr;\r\n`;\r\n\r\nconst innerGridItem = css`\r\n    \r\n    padding: 12px;\r\n    text-align: center;\r\n    color: #f2f2f2;\r\n    font-size: 30px;\r\n    line-height:1.8;\r\n}\r\n`;\r\n\r\nconst buttonStyle = css`\r\n\r\nborder: none;\r\nwidth:80px;\r\nheight:80px;\r\nborder-radius: 40px;\r\nfont-size: 20px;\r\n}\r\n`;\r\n\r\nclass Slider extends Component {\r\n    state = {\r\n        sliderValue: 0,\r\n        direction: 'Stopped',\r\n        speed: 0\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToTrainRemoteControl((err, data) => {\r\n            console.log(data);\r\n            let { direction, speed } = data;\r\n            let sliderValue = 0;\r\n            switch (direction.toLowerCase()) {\r\n                case 'forwards':\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    sliderValue = speed;\r\n                    break;\r\n                case 'backwards':\r\n                    sliderValue = speed < 0 ? speed : -speed;\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    break;\r\n                default:\r\n                    direction = 'Stopped';\r\n                    speed = 0;\r\n            }\r\n            console.log(sliderValue);\r\n            this.setState({\r\n                sliderValue: sliderValue,\r\n                direction: this.capitalizeFirstLetter(direction),\r\n                speed: speed\r\n            });\r\n        });\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    setSliderValues(e) {\r\n        const val = e.target.value;\r\n        let direction;\r\n        let speed = 0;\r\n\r\n        if (val > 0) {\r\n            speed = val;\r\n            direction = 'Forwards';\r\n        } else if (val < 0) {\r\n            speed = -val;\r\n            direction = 'Backwards';\r\n        } else {\r\n            speed = Number(val);\r\n            direction = 'Stopped';\r\n        }\r\n\r\n        this.setState(state => {\r\n            return { sliderValue: val, direction: direction, speed: speed };\r\n        });\r\n        sendDataToControlTrain(speed, direction);\r\n    }\r\n\r\n    stopTrain() {\r\n        this.setState(state => {\r\n            return { sliderValue: 0, direction: 'Stopped', speed: Number(0) };\r\n        });\r\n        sendDataToControlTrain(0, 'Stopped');\r\n    }\r\n\r\n    displayStop() {\r\n        if (this.state.speed === 0) {\r\n            return;\r\n        }\r\n        return (\r\n            <button css={buttonStyle} onClick={() => this.stopTrain()}>\r\n                STOP\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Motor</h2>\r\n                <div css={innerGrid}>\r\n                    <div />\r\n                    <div css={innerGridItem}>{this.state.direction}</div>\r\n                    <div css={innerGridItem}>{this.state.speed}%</div>\r\n                    <button\r\n                        css={buttonStyle}\r\n                        onClick={() => this.stopTrain()}\r\n                        className={\r\n                            this.state.speed === 0 ? 'bg-light-grey' : 'bg-red'\r\n                        }\r\n                    >\r\n                        STOP\r\n                    </button>\r\n                </div>\r\n                <input\r\n                    type='range'\r\n                    id='start'\r\n                    name='volume'\r\n                    min='-100'\r\n                    max='100'\r\n                    value={this.state.sliderValue}\r\n                    onChange={e => this.setSliderValues(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React, { Component } from 'react';\r\n\r\nclass VideoFeed extends Component {\r\n    url = `http://${this.props.url}:${this.props.port}/video_feed`;\r\n    // url = `https://explore.org/livecams/player/sharks/shark-cam/`;\r\n\r\n    render() {\r\n        return (\r\n            <figure>\r\n                <figcaption>{this.props.caption}</figcaption>\r\n                <picture>\r\n                    <img\r\n                        src={this.url}\r\n                        alt='raw video feed from opencv on the RPI'\r\n                    />\r\n                </picture>\r\n                {/* this is the feed from the pi zero, you will have to find the ip */}\r\n                {/* address of it and then input it below  */}\r\n                {/* <figcaption> {this.url}</figcaption> */}\r\n            </figure>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoFeed;\r\n","import React, { Component } from 'react';\r\nimport { subscribeToInfo } from '../../api';\r\nimport './info.css';\r\nimport Test from './test';\r\nconst uniqueString = require('unique-string');\r\n\r\nconst Foo = props => (\r\n    <div className='item'>\r\n        <h3>{props.title}</h3>\r\n        hello {props.data}\r\n    </div>\r\n);\r\n\r\nclass Info extends Component {\r\n    state = {\r\n        proximity: 'no data yet',\r\n        info: []\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToInfo((err, infoItem) => {\r\n            console.log(infoItem);\r\n            // if item exists then update it\r\n            // else add new item\r\n            // use header as key for comparison.\r\n            infoItem.header = String(infoItem.header).trim();\r\n            const result = this.checkInfoItemExistsAndUpdate(infoItem);\r\n            // if (result === -1) {\r\n            //     console.log('info item not found...');\r\n            this.addInfoItem(infoItem);\r\n            // }\r\n        });\r\n    }\r\n\r\n    checkInfoItemExistsAndUpdate = infoItem => {\r\n        if (!infoItem) return console.log('error: no item ');\r\n        let info = [...this.state.info];\r\n        // this returns an array of one or more.\r\n        info = info.filter(e => e.header === infoItem.header);\r\n        // return if empty\r\n        if (info.length === 0) {\r\n            return;\r\n        }\r\n\r\n        //now remove existing info items with the same header.\r\n        //and setState\r\n        info = [...this.state.info];\r\n        info = info.filter(e => e.header !== infoItem.header);\r\n        this.setState({ info });\r\n    };\r\n\r\n    addInfoItem = item => {\r\n        //get all the info items from state.\r\n        const info = [...this.state.info];\r\n\r\n        item.id = uniqueString();\r\n        item.time = new Date();\r\n        info.push(item);\r\n        let v = info.sort((a, b) => {\r\n            return new Date(b.time) - new Date(a.time);\r\n        });\r\n        // console.log(v);\r\n        this.setState({ info });\r\n        console.log(`Info Item added: ${JSON.stringify(item)}`);\r\n    };\r\n\r\n    removeInfoItem = id => {\r\n        console.log(id);\r\n        let info = [...this.state.info];\r\n        info = info.filter(e => e.id !== id);\r\n        this.setState({ info });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='info-control-container'>\r\n                <div className='control-row-one'>\r\n                    <p className='label'>Info</p>\r\n                </div>\r\n                <div className='control-row-two'>\r\n                    {this.state.info.map(item => (\r\n                        <div key={item.id} className='item'>\r\n                            <span>{item.header}</span>\r\n                            <span>{item.message}</span>\r\n                            <button\r\n                                onClick={() => this.removeInfoItem(item.id)}\r\n                            >\r\n                                Remove\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport './settings.css';\r\n\r\nexport default props => {\r\n    const handleClick = e => {\r\n        e.stopPropagation();\r\n    };\r\n    const saveValue = e => {\r\n        console.log('blur');\r\n    };\r\n    return (\r\n        <div className='overlay' onClick={props.toggle}>\r\n            <div className='settings-panel' onClick={handleClick}>\r\n                <h2>Settings</h2>\r\n                {props.videoFeeds.map(feed => (\r\n                    <div className='settings-panel-item' key={feed.id}>\r\n                        <label>URL:</label>\r\n                        <input\r\n                            type='text'\r\n                            defaultValue={feed.url}\r\n                            onBlur={saveValue}\r\n                        />\r\n                        <label>Port:</label>\r\n                        <input type='text' defaultValue={feed.port} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\n// import Time from './controls/time';\nimport ProximitySensor from './controls/proximity-sensor';\nimport Slider from './controls/slider-control';\nimport VideoFeed from './video/video-feed';\nimport Info from './controls/info/rpi-info';\nimport Settings from './settings/settings';\n\n// const Settings = () => {\n//     return <div className='settings-panel'>settings here</div>;\n// };\n\n// pi 7\" touchscreen Screen Resolution 800 x 480 pixels\nclass App extends Component {\n    state = {\n        videoFeeds: [\n            {\n                id: 2,\n                url: '192.168.0.4',\n                port: '8081',\n                caption: 'raw'\n            },\n            {\n                id: 1,\n                url: '192.168.0.18',\n                port: '5000',\n                caption: 'Processed Feed'\n            }\n        ],\n        rawFeedUrl: '192.168.0.4',\n        rawFeedPort: '8081',\n        OpencvFeedUrl: '192.168.0.18',\n        OpencvFeedPort: '5000',\n        websocketUrl: '192.168.0.4',\n        websocketPort: 5000,\n        settingsShow: false\n    };\n\n    toggleSettingsPage = () => {\n        const settings = this.state.settingsShow;\n        this.setState({ settingsShow: !settings });\n        console.log(!settings);\n    };\n\n    render() {\n        const showSettings = this.state.settingsShow;\n        let settings;\n\n        if (showSettings) {\n            settings = (\n                <Settings\n                    videoFeeds={this.state.videoFeeds}\n                    toggle={this.toggleSettingsPage}\n                    foo='fff'\n                />\n            );\n        }\n\n        return (\n            <main>\n                {settings}\n                <div className='App'>\n                    <div className='feeds'>\n                        {this.state.videoFeeds.map(feed => (\n                            <VideoFeed\n                                key={feed.id}\n                                url={feed.url}\n                                port={feed.port}\n                                caption={feed.caption}\n                            />\n                        ))}\n                        {/* <VideoFeed\n                            url={this.state.OpencvFeedUrl}\n                            port={this.state.OpencvFeedPort}\n                            caption='Processed video feed'\n                        />\n                        <VideoFeed\n                            url={this.state.rawFeedUrl}\n                            port={this.state.rawFeedPort}\n                            caption='Raw video feed'\n                        /> */}\n                        <div>\n                            <button onClick={this.toggleSettingsPage}>\n                                settings\n                            </button>\n                        </div>\n                    </div>\n                    <div className='controls'>\n                        <ProximitySensor />\n                        <Slider />\n                        <Info />\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}